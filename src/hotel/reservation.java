/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel;

import java.sql.ResultSetMetaData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ziamdriel03
 */
public class reservation extends javax.swing.JFrame {

    /**
     * Creates new form reservation
     */
    public reservation() {
        initComponents();
        Connect();
        autoID();
        RoomTypeL();
        RoomNo();
        BedType();
        Load_reservation();       
    }

    Connection con;
    PreparedStatement pat;
    DefaultTableModel d;

    


    public void Connect() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/hotelmanagement", "root", "");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

  public void autoID() {
    try {
        // Reset reservation number to 1 for a new user session
        String query = "SELECT MAX(ReserveID) FROM reservation WHERE userID = ?";
        pat = con.prepareStatement(query);
        pat.setInt(1, Login.UID); // Use the current logged-in user's ID

        ResultSet rs = pat.executeQuery();
        if (rs.next()) {
            String maxID = rs.getString(1);
            System.out.println("Max ReserveID for user " + Login.UID + ": " + maxID);

            if (maxID == null || maxID.length() <= 1) {
                jLabel12.setText("R0001"); // If no reservations exist for the user
            } else {
                String numericPart = maxID.substring(1); // Get numeric part (e.g., "0003" from "R0003")
                long id = Long.parseLong(numericPart);
                id++; // Increment the ID
                String newID = "R" + String.format("%04d", id);
                jLabel12.setText(newID); // Set the new ReserveID for the user
                System.out.println("New ReserveID generated: " + newID); // Debugging log
            }
        } else {
            jLabel12.setText("R0001"); // Default if no reservations for the user
            System.out.println("No reservations found for user " + Login.UID + ", setting ReserveID to R0001");
        }
    } catch (SQLException ex) {
        Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void RoomTypeL() {
           try {
        pat = con.prepareStatement("SELECT DISTINCT RoomType FROM room");
        ResultSet rs = pat.executeQuery();
        txtrtype.removeAllItems();
        while (rs.next()) {
            txtrtype.addItem(rs.getString("RoomType"));
        }
    } catch (SQLException ex) {
        Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    public void RoomNo() {
        try {
        pat = con.prepareStatement("SELECT DISTINCT RoomID FROM room");
        ResultSet rs = pat.executeQuery();
        txtro.removeAllItems();
        while (rs.next()) {
            txtro.addItem(rs.getString("RoomID"));
        }
    } catch (SQLException ex) {
        Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    public void BedType() {
         try {
        pat = con.prepareStatement("SELECT DISTINCT BedType FROM room");
        ResultSet rs = pat.executeQuery();
        txtbtype.removeAllItems();
        while (rs.next()) {
            txtbtype.addItem(rs.getString("BedType"));
        }
    } catch (SQLException ex) {
        Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
    }
            }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        left = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        txtaddress = new javax.swing.JTextField();
        txtcheckin = new com.toedter.calendar.JDateChooser();
        txtcheckout = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtrtype = new javax.swing.JComboBox<>();
        txtro = new javax.swing.JComboBox<>();
        txtbtype = new javax.swing.JComboBox<>();
        txtmobile = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        gaga = new javax.swing.JButton();
        right = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(1220, 590));
        jPanel1.setLayout(null);

        left.setBackground(new java.awt.Color(255, 255, 255));
        left.setMinimumSize(new java.awt.Dimension(390, 590));
        left.setPreferredSize(new java.awt.Dimension(400, 500));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("RESERVATION");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Reservation No");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Address");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Mobile No");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Check In");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Check out");

        txtname.setMinimumSize(new java.awt.Dimension(64, 30));
        txtname.setPreferredSize(new java.awt.Dimension(71, 25));

        txtaddress.setPreferredSize(new java.awt.Dimension(71, 30));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Room Type");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Room No");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Bed Type");

        txtrtype.setMinimumSize(new java.awt.Dimension(72, 30));

        txtro.setPreferredSize(new java.awt.Dimension(72, 30));

        txtbtype.setMinimumSize(new java.awt.Dimension(72, 30));
        txtbtype.setPreferredSize(new java.awt.Dimension(72, 30));

        txtmobile.setMinimumSize(new java.awt.Dimension(64, 30));
        txtmobile.setPreferredSize(new java.awt.Dimension(71, 30));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("jLabel12");

        jButton5.setText("close");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        gaga.setText("haha");

        javax.swing.GroupLayout leftLayout = new javax.swing.GroupLayout(left);
        left.setLayout(leftLayout);
        leftLayout.setHorizontalGroup(
            leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftLayout.createSequentialGroup()
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(leftLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(txtmobile, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtcheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtcheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtrtype, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtro, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtbtype, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(leftLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftLayout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(gaga)
                                .addGap(11, 11, 11))
                            .addGroup(leftLayout.createSequentialGroup()
                                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3))
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addGroup(leftLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel12))
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        leftLayout.setVerticalGroup(
            leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtaddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(12, 12, 12)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtmobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtcheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtcheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtrtype, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtbtype, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(86, 86, 86)
                .addGroup(leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gaga))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel1.add(left);
        left.setBounds(0, 0, 350, 590);

        right.setBackground(new java.awt.Color(102, 255, 255));
        right.setMinimumSize(new java.awt.Dimension(690, 590));
        right.setPreferredSize(new java.awt.Dimension(780, 590));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ReserveNo", "Name", "Adress", "MobileNo", "CheckIn", "CheckOut", "RoomType", "RoomNo", "BedType", "Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton4.setText("Clear");
        jButton4.setPreferredSize(new java.awt.Dimension(90, 40));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.setPreferredSize(new java.awt.Dimension(90, 40));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Edit");
        jButton2.setPreferredSize(new java.awt.Dimension(90, 40));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.setPreferredSize(new java.awt.Dimension(90, 40));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightLayout = new javax.swing.GroupLayout(right);
        right.setLayout(rightLayout);
        rightLayout.setHorizontalGroup(
            rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(rightLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 853, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        rightLayout.setVerticalGroup(
            rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jPanel1.add(right);
        right.setBounds(310, 0, 930, 590);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          String reserveID = jLabel12.getText();
    String name = txtname.getText().trim();
    String address = txtaddress.getText().trim();
    String mobile = txtmobile.getText().trim();

    // Validate inputs
    if (txtcheckin.getDate() == null || txtcheckout.getDate() == null || 
        name.isEmpty() || address.isEmpty() || mobile.isEmpty() ||
        txtrtype.getSelectedIndex() == -1 || txtbtype.getSelectedIndex() == -1 || 
        txtro.getSelectedIndex() == -1) {

        JOptionPane.showMessageDialog(this, "Please fill in all fields", "Missing Information", JOptionPane.WARNING_MESSAGE);
        return;
    }

    SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
    String StartDate = df1.format(txtcheckin.getDate());
    String EndDate = df1.format(txtcheckout.getDate());

    String roomType = txtrtype.getSelectedItem().toString();
    String bedType = txtbtype.getSelectedItem().toString();
    String roomNo = txtro.getSelectedItem().toString();

    // Validate that CheckIn date is today or later
    Date today = new Date();
    if (txtcheckin.getDate().before(today)) {
        JOptionPane.showMessageDialog(this, "Check-in date cannot be before today's date.", "Invalid Date", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Check if checkout date is before check-in date
    if (txtcheckin.getDate().after(txtcheckout.getDate())) {
        JOptionPane.showMessageDialog(this, "Check-out date cannot be before the check-in date", "Invalid Date", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Calculate the number of nights
        long diffInMillis = txtcheckout.getDate().getTime() - txtcheckin.getDate().getTime();
        long numberOfNights = diffInMillis / (1000 * 60 * 60 * 24); // Convert milliseconds to days

        // Fetch the room's amount per night
        double roomAmountPerNight = 0;
        pat = con.prepareStatement("SELECT Amount FROM room WHERE roomID = ?");
        pat.setString(1, roomNo);
        ResultSet rs = pat.executeQuery();
        if (rs.next()) {
            roomAmountPerNight = rs.getDouble("Amount");
        }

        // Calculate the total amount
        double totalAmount = numberOfNights * roomAmountPerNight;

        // Check if the room is already booked during the selected dates (excluding other users' reservations)
        pat = con.prepareStatement(
            "SELECT * FROM reservation WHERE roomNo = ? AND ( " +
            "(CheckIn BETWEEN ? AND ?) OR " + 
            "(CheckOut BETWEEN ? AND ?) OR " + 
            "(CheckIn <= ? AND CheckOut >= ?)" + 
            ") AND userID != ?"  // Exclude reservations by other users
        );

        pat.setString(1, roomNo);
        pat.setString(2, StartDate);
        pat.setString(3, EndDate);
        pat.setString(4, StartDate);
        pat.setString(5, EndDate);
        pat.setString(6, StartDate);
        pat.setString(7, EndDate);
        pat.setInt(8, Login.UID);  // Exclude current user

        rs = pat.executeQuery();
        if (rs.next()) {
            JOptionPane.showMessageDialog(this, "Room is unavailable for the selected dates.", "Room Unavailable", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Proceed to insert the reservation if no conflicts found
       pat = con.prepareStatement(
    "INSERT INTO reservation (ReserveID, userID, Name, Address, MobileNo, CheckIn, CheckOut, bedType, roomNo, roomType, amount, status) " +
    "VALUES (?,?,?,?,?,?,?,?,?,?,?,?)"
);

pat.setString(1, reserveID);
pat.setInt(2, Login.UID);  // Use the logged-in user's ID
pat.setString(3, name);
pat.setString(4, address);
pat.setString(5, mobile);
pat.setString(6, StartDate);
pat.setString(7, EndDate);
pat.setString(8, bedType);
pat.setString(9, roomNo);
pat.setString(10, roomType);
pat.setDouble(11, totalAmount);
pat.setString(12, "Pending");  // Set the status to 'Pending'

        pat.executeUpdate();
        JOptionPane.showMessageDialog(this, "Reservation added successfully.\nTotal Amount: " + totalAmount);

        // Clear fields after successful reservation
        jLabel12.setText("");
        txtname.setText("");
        txtaddress.setText("");
        txtmobile.setText("");
        txtcheckin.setDate(null);
        txtcheckout.setDate(null);
        txtrtype.setSelectedIndex(-1);
        txtbtype.setSelectedIndex(-1);
        txtro.setSelectedIndex(-1);

        autoID();
        Load_reservation();

    } catch (SQLException ex) {
        Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String reserveID = jLabel12.getText();
    String name = txtname.getText().trim();
    String address = txtaddress.getText().trim();
    String mobile = txtmobile.getText().trim();

    // Validate inputs
    if (name.isEmpty() || address.isEmpty() || mobile.isEmpty() || 
        txtcheckin.getDate() == null || txtcheckout.getDate() == null ||
        txtrtype.getSelectedIndex() == -1 || txtbtype.getSelectedIndex() == -1 || 
        txtro.getSelectedIndex() == -1) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields", "Missing Information", JOptionPane.WARNING_MESSAGE);
        return;
    }

    SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
    Date startDate = txtcheckin.getDate();
    Date endDate = txtcheckout.getDate();
    String StartDate = df1.format(startDate);
    String EndDate = df1.format(endDate);
    
    String roomType = txtrtype.getSelectedItem().toString();
    String bedType = txtbtype.getSelectedItem().toString();
    String roomNo = txtro.getSelectedItem().toString();

    try {
        // Validate that CheckOut date is after CheckIn date
        if (startDate.after(endDate)) {
            JOptionPane.showMessageDialog(this, "Check-Out date cannot be before Check-In date.");
            return;
        }

        // Validate that CheckIn date is today or later
        Date today = new Date();
        if (startDate.before(today)) {
            JOptionPane.showMessageDialog(this, "Check-in date cannot be before today's date.", "Invalid Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the room is already reserved for the selected dates, excluding the current reservation
        pat = con.prepareStatement(
            "SELECT COUNT(*) FROM reservation WHERE roomNo = ? AND reserveID != ? AND userID != ? AND ( " +
            "(CheckIn BETWEEN ? AND ?) OR " + 
            "(CheckOut BETWEEN ? AND ?) OR " + 
            "(CheckIn <= ? AND CheckOut >= ?)" + 
            ")"
        );
        pat.setString(1, roomNo);
        pat.setString(2, reserveID);  // Exclude the current reservation
        pat.setInt(3, Login.UID);  // Exclude the logged-in user's other reservations
        pat.setString(4, StartDate);
        pat.setString(5, EndDate);
        pat.setString(6, StartDate);
        pat.setString(7, EndDate);
        pat.setString(8, StartDate);
        pat.setString(9, EndDate);

        ResultSet rs = pat.executeQuery();

        if (rs.next() && rs.getInt(1) > 0) {
            JOptionPane.showMessageDialog(this, "This room is already reserved for the selected dates.");
            return; // Prevent further actions if the room is reserved
        }

        // Recalculate the amount (e.g., based on the number of nights and room rate)
        long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());
        long nights = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);

        // You can fetch the room rate based on the room type or room number
        double roomRate = getRoomRate(roomNo);  // Implement this method to fetch the rate for the selected room

        if (roomRate <= 0) {
            JOptionPane.showMessageDialog(this, "Invalid room rate. Please try again.");
            return;
        }

        double amount = nights * roomRate;  // Calculate total amount

        // If no conflicts, update the reservation in the database
        pat = con.prepareStatement(
            "UPDATE reservation SET Name = ?, Address = ?, MobileNo = ?, CheckIn = ?, CheckOut = ?, bedType = ?, roomNo = ?, roomType = ?, amount = ? " +
            "WHERE reserveID = ? AND userID = ?"
        );

        // Set parameters for the update query
        pat.setString(1, name);
        pat.setString(2, address);
        pat.setString(3, mobile);
        pat.setString(4, StartDate);
        pat.setString(5, EndDate);
        pat.setString(6, bedType);
        pat.setString(7, roomNo);
        pat.setString(8, roomType);
        pat.setDouble(9, amount);  // Update the amount field
        pat.setString(10, reserveID);  // Ensure to update the correct reservation using ReserveID
        pat.setInt(11, Login.UID);  // Ensure the user is updating their own reservation

        // Execute the update query
        pat.executeUpdate();
        JOptionPane.showMessageDialog(this, "Reservation updated successfully.");

        // Reset form fields after successful update
        jLabel12.setText("");
        txtname.setText("");
        txtaddress.setText("");
        txtmobile.setText("");
        txtcheckin.setDate(null);
        txtcheckout.setDate(null);
        txtrtype.setSelectedIndex(-1);
        txtbtype.setSelectedIndex(-1);
        txtro.setSelectedIndex(-1);

        // Regenerate Reserve ID and reload reservations
        autoID();
        Load_reservation();

        // Enable the save button again
        jButton1.setEnabled(true);

    } catch (SQLException ex) {
        Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error updating reservation: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton2ActionPerformed
private double getRoomRate(String roomNo) {
    double rate = 0.0;
    try {
        // Example: Fetch room rate from database based on room number or type
        pat = con.prepareStatement("SELECT Amount FROM room WHERE roomID = ?");
        pat.setString(1, roomNo);
        ResultSet rs = pat.executeQuery();
        if (rs.next()) {
            rate = rs.getDouble("Amount");
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return rate;
}
    
    
    private int previouslySelectedRow = -1;
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // Get the selected row index
       // Get the currently selected row index
    int selectedRow = jTable1.getSelectedRow();

    // Check if the same row is clicked again
    if (selectedRow == previouslySelectedRow) {
        // Clear all fields
        jLabel12.setText("");
        txtname.setText("");
        txtaddress.setText("");
        txtmobile.setText("");
        txtcheckin.setDate(null);
        txtcheckout.setDate(null);
        txtrtype.setSelectedIndex(-1);
        txtbtype.setSelectedIndex(-1);
        txtro.setSelectedIndex(-1);
      

        // Enable the Add button
        jButton1.setEnabled(true);

        // Deselect the row
        jTable1.clearSelection();

        // Reset the previously selected row index
        previouslySelectedRow = -1;
    } else {
        // Set the previously selected row index to the current row
        previouslySelectedRow = selectedRow;

        if (selectedRow >= 0) { // Ensure a valid row is selected
            try {
                // Set Reserve ID (column 0)
                jLabel12.setText(jTable1.getValueAt(selectedRow, 0) != null ? jTable1.getValueAt(selectedRow, 0).toString() : "");

                // Set Name (column 1)
                txtname.setText(jTable1.getValueAt(selectedRow, 1) != null ? jTable1.getValueAt(selectedRow, 1).toString() : "");

                // Set Address (column 2)
                txtaddress.setText(jTable1.getValueAt(selectedRow, 2) != null ? jTable1.getValueAt(selectedRow, 2).toString() : "");

                // Set Mobile Number (column 3)
                txtmobile.setText(jTable1.getValueAt(selectedRow, 3) != null ? jTable1.getValueAt(selectedRow, 3).toString() : "");

                // Parse and set Check-In and Check-Out dates (columns 4 and 5)
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                if (jTable1.getValueAt(selectedRow, 4) != null) {
                    txtcheckin.setDate(df.parse(jTable1.getValueAt(selectedRow, 4).toString()));
                } else {
                    txtcheckin.setDate(null);
                }

                if (jTable1.getValueAt(selectedRow, 5) != null) {
                    txtcheckout.setDate(df.parse(jTable1.getValueAt(selectedRow, 5).toString()));
                } else {
                    txtcheckout.setDate(null);
                }

                // Check for null and set selected items for combo boxes
                txtrtype.setSelectedItem(jTable1.getValueAt(selectedRow, 6) != null ? jTable1.getValueAt(selectedRow, 6).toString() : "");
                txtbtype.setSelectedItem(jTable1.getValueAt(selectedRow, 7) != null ? jTable1.getValueAt(selectedRow, 7).toString() : "");
                txtro.setSelectedItem(jTable1.getValueAt(selectedRow, 8) != null ? jTable1.getValueAt(selectedRow, 8).toString() : "");

                // Set the amount (column 9)
              

                // Disable the Add button to avoid accidental additions
                jButton1.setEnabled(false);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error loading reservation details: " + ex.getMessage());
            }
        }
    }

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         // Retrieve the reserveID from the label
    String reserveID = jLabel12.getText();

    // Validate the reserveID
    if (reserveID == null || reserveID.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "No valid reservation selected.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Confirm the deletion with the user
    int confirm = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to delete this reservation?", 
        "Confirm Deletion", 
        JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        try {
            // Prepare the DELETE SQL statement
            pat = con.prepareStatement("DELETE FROM reservation WHERE reserveID = ? AND userID = ?");
            pat.setString(1, reserveID);
            pat.setInt(2,Login.UID);

            // Execute the DELETE operation
            int rowsAffected = pat.executeUpdate();

            if (rowsAffected > 0) {
                // Show success message
                JOptionPane.showMessageDialog(this, "Reservation deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Clear the form fields
                jLabel12.setText("");
                txtname.setText("");
                txtaddress.setText("");
                txtmobile.setText("");
                txtcheckin.setDate(null);
                txtcheckout.setDate(null);
                txtrtype.setSelectedIndex(-1);
                txtbtype.setSelectedIndex(-1);
                txtro.setSelectedIndex(-1);
              

                // Refresh the data
                autoID();
                Load_reservation();
                jButton1.setEnabled(true);
            } else {
                // Show error if no rows were affected
                JOptionPane.showMessageDialog(this, "No reservation found with the provided ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error deleting reservation: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        txtname.setText("");
            txtaddress.setText("");
            txtmobile.setText("");
            txtcheckin.setDate(null);
            txtcheckout.setDate(null);
            txtrtype.setSelectedIndex(-1);
            txtbtype.setSelectedIndex(-1);
            txtro.setSelectedIndex(-1);
            
        
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Dashboard obj = new Dashboard();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton5ActionPerformed
 public void Load_reservation() {
    try {
        // Use a parameterized query to prevent SQL injection
        pat = con.prepareStatement("SELECT * FROM reservation WHERE userID = ?");
        pat.setInt(1, Login.UID); // Use Login.UID to fetch only the current user's reservations
        ResultSet rs = pat.executeQuery();

        // Get table model and clear existing rows
        d = (DefaultTableModel) jTable1.getModel();
        d.setRowCount(0);

        while (rs.next()) {
            // Create a new row with values for the current reservation
            Vector<String> v2 = new Vector<>();
            v2.add(rs.getString("ReserveID"));
            v2.add(rs.getString("Name"));
            v2.add(rs.getString("Address"));
            v2.add(rs.getString("MobileNo"));
            v2.add(rs.getString("CheckIn"));
            v2.add(rs.getString("CheckOut"));
            v2.add(rs.getString("roomType"));
            v2.add(rs.getString("roomNo"));
            v2.add(rs.getString("bedType"));
            v2.add(rs.getString("amount"));
            v2.add(rs.getString("status"));

            // Add the row to the table model
            d.addRow(v2);
        }
    } catch (SQLException ex) {
        Logger.getLogger(room.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "Error loading reservations: " + ex.getMessage());
    }
}
 private String currentUser;
  
    
    // Method to load reservations for the currentUser
  
   
  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton gaga;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel left;
    private javax.swing.JPanel right;
    private javax.swing.JTextField txtaddress;
    private javax.swing.JComboBox<String> txtbtype;
    private com.toedter.calendar.JDateChooser txtcheckin;
    private com.toedter.calendar.JDateChooser txtcheckout;
    private javax.swing.JTextField txtmobile;
    private javax.swing.JTextField txtname;
    private javax.swing.JComboBox<String> txtro;
    private javax.swing.JComboBox<String> txtrtype;
    // End of variables declaration//GEN-END:variables
}
